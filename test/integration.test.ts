import { describe, it, expect } from 'vitest';
import { generate } from '../src/tywrap.js';
import { processUtils, fsUtils } from '../src/utils/runtime.js';
import { NodeBridge } from '../src/runtime/node.js';

/**
 * IR-only Integration Tests
 */

describe('IR-only integration', () => {
  it('tywrap_ir emits JSON IR for math', async () => {
    const result = await processUtils.exec('python3', [
      '-m',
      'tywrap_ir',
      '--module',
      'math',
      '--no-pretty',
    ]);
    expect(result.code).toBe(0);
    const json = JSON.parse(result.stdout);
    expect(json.module).toBe('math');
    expect(Array.isArray(json.functions)).toBe(true);
  });

  it('generate() writes TS for math and contains wrappers', async () => {
    const outDir = './generated';
    const res = await generate({
      pythonModules: { math: { runtime: 'node', typeHints: 'strict' } },
      output: { dir: outDir, format: 'esm', declaration: false, sourceMap: false },
      runtime: { node: { pythonPath: 'python3' } },
      performance: { caching: false, batching: false, compression: 'none' },
      development: { hotReload: false, sourceMap: false, validation: 'none' },
    } as any);
    expect(res.written.some(p => p.endsWith('math.generated.ts'))).toBe(true);
    const content = await fsUtils.readFile(`${outDir}/math.generated.ts`);
    expect(content).toContain('Generated by tywrap');
    expect(content).toContain('export async function');
    expect(content).toContain("__bridge.call('math.sqrt'");
  });
});

describe('NodeBridge smoke', () => {
  it('calls math.sqrt', async () => {
    const bridge = new NodeBridge({ scriptPath: 'runtime/python_bridge.py' });
    const result = await bridge.call<number>('math', 'sqrt', [9]);
    expect(result).toBe(3);
    await bridge.dispose();
  }, 30000);
});
